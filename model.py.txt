import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
import joblib
from pathlib import Path

studs = pd.read_csv(Path('C:/Users/–ñ–∞–∫/Desktop/Plane Price.csv'))
print(studs.head())

studs.dropna(subset = 'Price',inplace = True)

studs = studs[["Rcmnd cruise Knots", "Stall Knots dirty", "Fuel gal/lbs", "Eng out rate of climb", "Takeoff over 50ft", "Price"]]
studs = studs.dropna()

print(studs.head())

Y = studs['Price']
X = studs.drop("Price", axis=1)

from sklearn.preprocessing import StandardScaler, MinMaxScaler  

ss = StandardScaler()
x2 = ss.fit_transform(X)

x2 = pd.DataFrame(x2)
print (x2.head(3))

from sklearn.model_selection import train_test_split


X_train_full,X_test,y_train_full,y_test = train_test_split(X,Y,test_size=0.2,random_state=0)
X_train,X_valid,y_train,y_valid = train_test_split(X_train_full,y_train_full,test_size=0.2,random_state=0)

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras import backend as K
import matplotlib.pyplot as plt


# 1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ R¬≤ –º–µ—Ç—Ä–∏–∫–∏ (–¥–æ–±–∞–≤–ª—è–µ–º accuracy-–∞–Ω–∞–ª–æ–≥ –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏)
def r_squared(y_true, y_pred):
    SS_res = K.sum(K.square(y_true - y_pred))
    SS_tot = K.sum(K.square(y_true - K.mean(y_true)))
    return 1 - SS_res/(SS_tot + K.epsilon())

# 2. –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
model = Sequential([
    Dense(128, activation='relu', input_shape=(X_train.shape[1],)),
    Dropout(0.3),
    Dense(64, activation='relu'),
    Dropout(0.2),
    Dense(32, activation='relu'),
    Dense(1)
])

# 3. –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Å —Ç—Ä–µ–º—è –º–µ—Ç—Ä–∏–∫–∞–º–∏
model.compile(optimizer=Adam(learning_rate=0.001),
              loss='mse',
              metrics=['mae', r_squared])  # –¢–µ–ø–µ—Ä—å 2 –º–µ—Ç—Ä–∏–∫–∏ + loss = –≤—Å–µ–≥–æ 3 –∑–Ω–∞—á–µ–Ω–∏—è

# 4. –û–±—É—á–µ–Ω–∏–µ
history = model.fit(
    X_train, y_train,
    validation_data=(X_test, y_test),
    epochs=100,
    batch_size=32,
    callbacks=[EarlyStopping(monitor='val_loss', patience=10)],
    verbose=1
)

# 5. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
plt.figure(figsize=(12, 4))

# Loss
plt.subplot(1, 3, 1)
plt.plot(history.history['loss'], label='Train')
plt.plot(history.history['val_loss'], label='Validation')
plt.title('Loss (MSE)')
plt.legend()

# MAE
plt.subplot(1, 3, 2)
plt.plot(history.history['mae'], label='Train')
plt.plot(history.history['val_mae'], label='Validation')
plt.title('MAE')
plt.legend()

# R¬≤
plt.subplot(1, 3, 3)
plt.plot(history.history['r_squared'], label='Train')
plt.plot(history.history['val_r_squared'], label='Validation')
plt.title('R¬≤ Score')
plt.legend()

plt.tight_layout()
plt.show()

# 6. –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏ (—Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º 3 –∑–Ω–∞—á–µ–Ω–∏—è)
test_loss, test_mae, test_r2 = model.evaluate(X_test, y_test, verbose=0)
print(f"\nTest Results:")
print(f"MSE (Loss): {test_loss:.2f}")
print(f"MAE: {test_mae:.2f}")
print(f"R¬≤ Score: {test_r2:.2f}")

from tensorflow.keras.models import load_model


model.save("my_model.keras")

import os

file_size = os.path.getsize("my_model.keras")
print(f"– –∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç") 